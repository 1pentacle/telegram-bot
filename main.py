import os
from flask import Flask, request
from telebot import TeleBot, types

TOKEN = '7561769200:AAEbeAAAZLFAoO7WrnQgYpZ3jz3lOfHYRjQ'
bot = TeleBot(TOKEN)
app = Flask(__name__)

WEBHOOK_URL_BASE = 'https://telegram-bot-l2vg.onrender.com'  # –∑–∞–º–µ–Ω–∏—à—å –Ω–∞ —Å–≤–æ–π URL
WEBHOOK_URL_PATH = f'/bot{TOKEN}'

user_state = {}

def get_back_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥'))
    return keyboard

def step_start(message):
    user_state[message.chat.id] = 'start'

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(
        text='üñ•Ô∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
        url='https://pocketoption.com/ru/?c=DEV906'
    ))
    markup.add(types.InlineKeyboardButton(
        text='‚úÖ –Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è',
        callback_data='registered'
    ))

    text = (
        '–ü—Ä–∏–≤–µ—Ç! üëã\n\n'
        'üì≤–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–∞–Ω–∞–ª—É, —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å—Ç–∞—Ç—å –º–æ–∏–º –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º –Ω–∞ Pocket Option –∏ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. '
        '–ß—Ç–æ–±—ã –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –Ω—É–∂–Ω–æ —Å–æ–±–ª—é—Å—Ç–∏ –≤–∞–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è:\n\n'
        '1Ô∏è‚É£ –ê–∫–∫–∞—É–Ω—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å **–ù–û–í–´–ú**! –ï—Å–ª–∏ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø" '
        '–≤—ã –ø–æ–ø–∞–¥–∞–µ—Ç–µ –Ω–∞ —Å—Ç–∞—Ä—ã–π, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–π—Ç–∏ —Å –Ω–µ–≥–æ –∏ –∑–∞–Ω–æ–≤–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø", –ø–æ—Å–ª–µ —á–µ–≥–æ –ø–æ –Ω–æ–≤–æ–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!\n\n'
        '2Ô∏è‚É£ –ß—Ç–æ–±—ã –±–æ—Ç —Å–º–æ–≥ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥ **DEV906** –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏! '
        '–û–Ω —Ç–∞–∫–∂–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–∞—ë—Ç +60% –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é!\n\n'
        '–ü–æ—Å–ª–µ –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–µ–¥—ë—Ç –≤–∞—Å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É ‚úÖ'
    )

    bot.send_message(message.chat.id, text, reply_markup=markup, parse_mode='Markdown')

def step_enter_id(message):
    user_state[message.chat.id] = 'enter_id'
    bot.send_message(
        message.chat.id,
        '‚úÖ –í–≤–µ–¥–∏—Ç–µ ID (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):',
        reply_markup=get_back_keyboard()
    )

@bot.message_handler(commands=['start'])
def handle_start(message):
    step_start(message)

@bot.callback_query_handler(func=lambda call: call.data == 'registered')
def handle_registered_callback(call):
    bot.answer_callback_query(call.id)
    step_enter_id(call.message)

@bot.message_handler(func=lambda message: True)
def handle_text(message):
    chat_id = message.chat.id
    text = message.text.strip()

    if text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        current = user_state.get(chat_id, 'start')
        if current == 'enter_id':
            step_start(message)
        else:
            bot.send_message(chat_id, "–í—ã —É–∂–µ –Ω–∞ –Ω–∞—á–∞–ª—å–Ω–æ–º —à–∞–≥–µ üëá", reply_markup=get_back_keyboard())
        return

    if user_state.get(chat_id) == 'enter_id':
        if text.isdigit():
            bot.send_message(chat_id, f'üì© –í–∞—à ID "{text}" –ø–æ–ª—É—á–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!', reply_markup=get_back_keyboard())
        else:
            bot.send_message(chat_id, '‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –¥–ª—è ID.', reply_markup=get_back_keyboard())
        return

    bot.send_message(chat_id, '‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ üôÅ', reply_markup=get_back_keyboard())

# ======== WEBHOOK PART =========

@app.route(WEBHOOK_URL_PATH, methods=['POST'])
def webhook():
    json_str = request.get_data().decode('utf-8')
    update = types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return '', 200

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
@app.before_first_request
def setup_webhook():
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL_BASE + WEBHOOK_URL_PATH)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))