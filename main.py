from flask import Flask, request
from telebot import TeleBot, types
import os

TOKEN = '7561769200:AAEbeAAAZLFAoO7WrnQgYpZ3jz3lOfHYRjQ'
bot = TeleBot(TOKEN)
app = Flask(__name__)
user_state = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ "–Ω–∞–∑–∞–¥"
def get_back_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥'))
    return keyboard

def step_start(message):
    user_state[message.chat.id] = 'start'
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(
        text='üñ•Ô∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
        url='https://pocketoption.com/ru/cabinet/registration?s=your_affiliate_link'
    ))
    markup.add(types.InlineKeyboardButton(
        text='‚úÖ –Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è',
        callback_data='registered'
    ))

    text = (
        '–ü—Ä–∏–≤–µ—Ç! üëã\n\n'
        'üì≤ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–∞–Ω–∞–ª—É, —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å—Ç–∞—Ç—å –º–æ–∏–º –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º...'
    )
    bot.send_message(message.chat.id, text, reply_markup=markup, parse_mode='Markdown')

def step_enter_id(message):
    user_state[message.chat.id] = 'enter_id'
    bot.send_message(
        message.chat.id,
        '‚úÖ –í–≤–µ–¥–∏—Ç–µ ID (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):',
        reply_markup=get_back_keyboard()
    )

@bot.message_handler(commands=['start'])
def handle_start(message):
    step_start(message)

@bot.callback_query_handler(func=lambda call: call.data == 'registered')
def handle_registered_callback(call):
    bot.answer_callback_query(call.id)
    step_enter_id(call.message)

@bot.message_handler(func=lambda message: True)
def handle_text(message):
    chat_id = message.chat.id
    text = message.text.strip()

    if text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        if user_state.get(chat_id) == 'enter_id':
            step_start(message)
        else:
            bot.send_message(chat_id, "–í—ã —É–∂–µ –Ω–∞ –Ω–∞—á–∞–ª—å–Ω–æ–º —à–∞–≥–µ üëá", reply_markup=get_back_keyboard())
        return

    if user_state.get(chat_id) == 'enter_id':
        if text.isdigit():
            bot.send_message(chat_id, f'üì© –í–∞—à ID "{text}" –ø–æ–ª—É—á–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!', reply_markup=get_back_keyboard())
        else:
            bot.send_message(chat_id, '‚ùó –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.', reply_markup=get_back_keyboard())
        return

    bot.send_message(chat_id, '‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ üôÅ', reply_markup=get_back_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ Webhook Telegram
@app.route(f"/bot{TOKEN}", methods=['POST'])
def webhook():
    json_string = request.get_data().decode('utf-8')
    update = types.Update.de_json(json_string)
    bot.process_new_updates([update])
    return 'ok', 200

@app.route('/')
def index():
    return '–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!', 200

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url=f"https://{os.environ['RENDER_EXTERNAL_HOSTNAME']}/bot{TOKEN}")
    app.run(host="0.0.0.0", port=10000)