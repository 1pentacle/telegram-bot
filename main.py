import os
import sqlite3
from flask import Flask, request
from telebot import TeleBot, types
import requests

TOKEN = '7561769200:AAEbeAAAZLFAoO7WrnQgYpZ3jz3lOfHYRjQ'  # –¢–æ–∫–µ–Ω
YOUR_DOMAIN = 'telegram-bot-l2vg.onrender.com'  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π –¥–æ–º–µ–Ω
WEBHOOK_URL = f"https://{YOUR_DOMAIN}/{TOKEN}"

bot = TeleBot(TOKEN)
app = Flask(__name__)

user_state = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –∏ —Ç–∞–±–ª–∏—Ü—ã
def init_db():
    conn = sqlite3.connect('botdata.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            chat_id INTEGER PRIMARY KEY,
            trader_id TEXT UNIQUE
        )
    ''')
    conn.commit()
    conn.close()

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å chat_id –∏ trader_id
def save_user(chat_id, trader_id):
    conn = sqlite3.connect('botdata.db')
    cursor = conn.cursor()
    cursor.execute('INSERT OR REPLACE INTO users (chat_id, trader_id) VALUES (?, ?)', (chat_id, trader_id))
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–∞–µ–º chat_id –ø–æ trader_id
def get_chat_id_by_trader_id(trader_id):
    conn = sqlite3.connect('botdata.db')
    cursor = conn.cursor()
    cursor.execute('SELECT chat_id FROM users WHERE trader_id = ?', (trader_id,))
    row = cursor.fetchone()
    conn.close()
    return row[0] if row else None

def get_start_keyboard():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(
        text='üñ•Ô∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
        url='https://u3.shortink.io/register?utm_campaign=823619&utm_source=affiliate&utm_medium=sr&a=gmURbwjR6oRBDh&ac=ttrade404&code=DEV906'  # –í—Å—Ç–∞–≤—å —Å–≤–æ—é —Å—Å—ã–ª–∫—É
    ))
    markup.add(types.InlineKeyboardButton(
        text='‚úÖ –Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è',
        callback_data='registered'
    ))
    return markup

def get_back_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(types.KeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥'))
    return keyboard

def send_start_message(chat_id):
    user_state[chat_id] = 'start'
    text = (
        '–ü—Ä–∏–≤–µ—Ç! üëã\n\n'
        'üì≤–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–∞–Ω–∞–ª—É, —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å—Ç–∞—Ç—å –º–æ–∏–º –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º –Ω–∞ Pocket Option –∏ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. '
        '–ß—Ç–æ–±—ã –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –Ω—É–∂–Ω–æ —Å–æ–±–ª—é—Å—Ç–∏ –≤–∞–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è:\n\n'
        '1Ô∏è‚É£ –ê–∫–∫–∞—É–Ω—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å **–ù–û–í–´–ú**! –ï—Å–ª–∏ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø" '
        '–≤—ã –ø–æ–ø–∞–¥–∞–µ—Ç–µ –Ω–∞ —Å—Ç–∞—Ä—ã–π, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–π—Ç–∏ —Å –Ω–µ–≥–æ –∏ –∑–∞–Ω–æ–≤–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø", –ø–æ—Å–ª–µ —á–µ–≥–æ –ø–æ –Ω–æ–≤–æ–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!\n\n'
        '2Ô∏è‚É£ –ß—Ç–æ–±—ã –±–æ—Ç —Å–º–æ–≥ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥ **DEV906** –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏! '
        '–û–Ω —Ç–∞–∫–∂–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–∞—ë—Ç +60% –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é!\n\n'
        '–ü–æ—Å–ª–µ –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–µ–¥—ë—Ç –≤–∞—Å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É ‚úÖ'
    )
    bot.send_message(chat_id, text, reply_markup=get_start_keyboard(), parse_mode='Markdown')

def send_enter_id_message(chat_id):
    user_state[chat_id] = 'enter_id'
    bot.send_message(chat_id, "‚úÖ –í–≤–µ–¥–∏—Ç–µ ID (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):", reply_markup=get_back_keyboard())

def check_pocket_option_id(user_id):
    # –ó–∞–≥–ª—É—à–∫–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ü–∏—Ñ—Ä—ã –∏ –¥–ª–∏–Ω–∞ > 5
    return user_id.isdigit() and len(user_id) > 5

@app.route(f"/{TOKEN}", methods=['POST'])
def webhook():
    json_string = request.get_data().decode('utf-8')
    update = types.Update.de_json(json_string)
    bot.process_new_updates([update])
    return '', 200

# –û–±—Ä–∞–±–æ—Ç–∫–∞ postback –æ—Ç Pocket Option
@app.route('/postback', methods=['GET', 'POST'])
def postback():
    data = request.values
    trader_id = data.get('trader_id')
    reg = data.get('reg')
    ftd = data.get('ftd')

    if trader_id:
        chat_id = get_chat_id_by_trader_id(trader_id)
        if chat_id:
            if reg == '1':
                bot.send_message(chat_id, "‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ –ø–∞—Ä—Ç–Ω—ë—Ä–∫—É!")
            if ftd == '1':
                bot.send_message(chat_id, "üí∞ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å–¥–µ–ª–∞–ª–∏ –ø–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç!")

    return 'OK', 200

@bot.message_handler(commands=['start'])
def handle_start(message):
    send_start_message(message.chat.id)

@bot.callback_query_handler(func=lambda call: call.data == 'registered')
def handle_registered(call):
    bot.answer_callback_query(call.id)
    send_enter_id_message(call.message.chat.id)

@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    chat_id = message.chat.id
    text = message.text.strip()

    if text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        send_start_message(chat_id)
        return

    if user_state.get(chat_id) == 'enter_id':
        if text.isdigit():
            if check_pocket_option_id(text):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ chat_id <-> trader_id
                save_user(chat_id, text)
                bot.send_message(chat_id, f"‚úÖ –í–∞—à ID {text} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –°–ø–∞—Å–∏–±–æ.", reply_markup=types.ReplyKeyboardRemove())
                user_state[chat_id] = 'verified'
            else:
                bot.send_message(chat_id, "‚ùó –û—à–∏–±–∫–∞‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ IDüôÅ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_back_keyboard())
        else:
            bot.send_message(chat_id, "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –¥–ª—è ID.", reply_markup=get_back_keyboard())
        return

    bot.send_message(chat_id, "‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ üôÅ", reply_markup=get_back_keyboard())

if __name__ == '__main__':
    init_db()
    print(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å webhook: {WEBHOOK_URL}")
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
